@page "/fetch-data"
@page "/fetch-data/{date:datetime}"

@using System.Collections.ObjectModel

@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public DateTime? Date { get; set; }

    [CascadingParameter]
    private IToolbarService ToolbarService { get; set; }

    private WeatherForecast[] forecasts;

    protected override async Task OnParametersSetAsync()
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        if (Date.HasValue)
        {
            forecasts = forecasts
                .Where(x => x.Date.Date == Date)
                .ToArray();
        }
    }

    protected async override Task OnAfterRenderAsync(bool _)
    {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);

        ToolbarService.Set<NavigationToolbar, HomeLink>(0);
        ToolbarService.Set<ActionToolbar, FetchDataSelect>(0,
            new ReadOnlyDictionary<string, object>(
            new Dictionary<string, object>
            {
                [nameof(FetchDataSelect.Date)] = Date,
                [nameof(FetchDataSelect.Forecasts)] = forecasts
            }));
    }
}
